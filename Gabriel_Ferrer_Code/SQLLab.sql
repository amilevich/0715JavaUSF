-- 2.1 SELECT
SELECT * FROM EMPLOYEE;
SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';
SELECT * FROM EMPLOYEE WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;
-- 2.2 ORDER BY
SELECT * FROM ALBUM ORDER BY TITLE DESC;
SELECT * FROM CUSTOMER ORDER BY CITY ASC;
-- 2.3 INSERT INTO
-- INSERT TWO GENRES
INSERT INTO GENRE VALUES (26,'Romantic');
INSERT INTO GENRE VALUES (27,'Horror');
-- INSERT TWO EMPLOYEES
INSERT INTO EMPLOYEE 
VALUES(9,'Ferrer','Gabriel','Owner',
    NULL, TO_DATE ('16-JUN-89'), TO_DATE('01-JAN-97'),
    '23 Heaven St', 'Heaven', 'PEACE', 'Heaven and Earth',
    '10101','+1 111-111-1111','+1 111-111-1111',
    'angelgabe@heaven.heaven');
INSERT INTO EMPLOYEE 
VALUES
  (10,'Doe','Ruben','Manager',9,TO_DATE ('11-APR-56'),
    TO_DATE('01-JAN-97'),'23 Heaven St','Heaven',
    'PEACE',
    'Heaven and Earth',
    '10101',
    '+1 111-111-1111',
    '+1 111-111-1111',
    'ruben@heaven.heaven'
  );
-- INSERT TWO CUSTOMERS 
INSERT INTO CUSTOMER VALUES
  (60,'Maya','Dinna','Walmart','212 Hay St',
    'Orlando','FL','USA', '32671',
    '+1 543-545-4323',
    '+1 432-546-4354',
    'maya@gmail.com', 4
  );
INSERT INTO CUSTOMER VALUES
  (61, 'Lana','Farouk','Publix','690 Tree St',
    'Austin','TX','USA', '85321', 
	'+1 324-543-4323',
    '+1 333-444-1432',
    'rana@misha.com', 2
  );
-- 2.4 UPDATE
UPDATE CUSTOMER SET FIRSTNAME = 'Robert', 
  LASTNAME = 'Walter' WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';
---
UPDATE ARTIST SET
  NAME = 'CCR' WHERE NAME = 'Creedence Clearwater Revival';
-- 2.5 LIKE
SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';
-- 2.6 BETWEEN
---
SELECT * FROM INVOICE WHERE TOTAL BETWEEN 15 AND 50;
---
SELECT * FROM EMPLOYEE WHERE HIREDATE BETWEEN TO_DATE ('2003/06/01', 'yyyy/mm/dd') AND TO_DATE ('2004/03/01', 'yyyy/mm/dd');
-- 2.7 DELETE
-- FIRST OPERATION DELETE ITEMS FROM INVOICELINES OF INVOICES
-- ASSOCIATED WITH THE CUSTOMER ORDERS
DELETE FROM INVOICELINE WHERE 
  INVOICEID IN ( SELECT INVOICEID FROM CUSTOMER 
        JOIN INVOICE USING (CUSTOMERID)
        JOIN INVOICELINE USING (INVOICEID)
        WHERE CUSTOMERID = 32 );
-- SECOND OPERATION DELETE INVOICES OF THE CUSTOMER
DELETE FROM INVOICE WHERE 
  CUSTOMERID IN ( SELECT CUSTOMERID FROM CUSTOMER 
        JOIN INVOICE USING (CUSTOMERID) WHERE CUSTOMERID = 32 );
-- THIRD OPERATION DELETE THE CUSTOMER
DELETE FROM CUSTOMER 
  WHERE
    FIRSTNAME = 'Robert' 
    AND LASTNAME = 'Walter';
-- 3.1 System Defined Functions
--- DISPLAY CURRENT TIME ACCDG TO 12HR AP/PM FORMAT
SELECT TO_CHAR(CURRENT_TIMESTAMP, 'HH12:MI AM') AS TIME FROM DUAL;
--- DISPLAY LENGTH OF MEDIATYPE
SELECT
    LENGTH(NAME) "MEDIATYPE LENGTH"
  FROM
    MEDIATYPE;
-- 3.2 System Defined Aggregate Functions
--- GET AVERAGE OF ALL TOTAL IN THE INVOICE TABLE
SELECT ROUND(AVG(TOTAL),2) AS "AVE OF TOTAL" FROM INVOICE;
--- GET THE HIGHEST PRICE FROM TRACK TABLE
SELECT MAX(UNITPRICE) AS "HIGHEST UNIT PRICE" FROM TRACK;
-- 3.3 User Defined Scalar Functions
--- CREATION
--- AVERAGE UNIT PRICE OF INVOICELINE RECORDS
CREATE OR REPLACE FUNCTION AVG_UNIT_PRICE
RETURN number IS
	AVP NUMBER(5,2) := 0.00;
BEGIN
	SELECT ROUND(AVG(UNITPRICE),4) INTO AVP FROM INVOICELINE;
	RETURN AVP;
END;
/
--- EXECUTION
DECLARE 
   A number(5,2); 
BEGIN 
   A := AVG_UNIT_PRICE(); 
   dbms_output.put_line('AVERAGE UNIT PRICE: ' || A); 
END; 
/


-- 3.4 User Defined Table Valued Functions
--- CREATE A TYPE CALLED EMPLOYEE_NAME. IN ORACLE IT IS POSSIBLE TO DEFINE A TYPE/CLASS SIMILAR TO JAVA
CREATE OR REPLACE TYPE EMPLOYEE_NAME
AS OBJECT
(
  LASTNAME    VARCHAR2(20),
  FIRSTNAME   VARCHAR2(20)
)
/
--- CREATE A TYPE CALLED TABLE_EMPLOYEE_NAME AS A TABLE OF EMPLOYEE_NAME
CREATE OR REPLACE TYPE TABLE_EMPLOYEE_NAME
   AS TABLE OF EMPLOYEE_NAME
/

--- CREATE A FUNCTION THAT CAN BE INVOKED INSIDE TABLE(  )
CREATE or REPLACE FUNCTION GET_EMPW_YR (EY in number) 
RETURN TABLE_EMPLOYEE_NAME PIPELINED IS
BEGIN
  FOR i IN (SELECT * FROM EMPLOYEE WHERE EXTRACT(YEAR FROM BIRTHDATE) > EY) LOOP
    PIPE ROW( EMPLOYEE_NAME(  i.LASTNAME, i.FIRSTNAME  ) );
  END LOOP;
  RETURN;
END;
/

--- INVOKE THE PIPELINED FUNCTION GET_EMPW_YR(EY in number) TO GET EMPLOYEES BORN AFTER 1968
SELECT * FROM table(GET_EMPW_YR(1968));

-- 4.1 Basic Stored Procedure
--- CREATION
CREATE or REPLACE PROCEDURE FNAME_LNAME_EMPLOYEE ( EMP OUT SYS_REFCURSOR)
  AS
BEGIN
    OPEN EMP FOR
    SELECT FIRSTNAME || ' ' || LASTNAME FROM EMPLOYEE;
END FNAME_LNAME_EMPLOYEE;
--- EXECUTION
VARIABLE mycursor refcursor;
EXEC FNAME_LNAME_EMPLOYEE(:mycursor);
PRINT mycursor;

-- 4.2 Stored Procedure Input Parameters
--- CREATION
CREATE OR REPLACE PROCEDURE UPDATE_EMPLOYEE (EID IN employee.employeeid%type,
ln IN employee.lastname%type, fn IN employee.firstname%type)
IS
BEGIN
    UPDATE EMPLOYEE SET LASTNAME = ln, FIRSTNAME = fn
	WHERE EMPLOYEEID = eid;
END UPDATE_EMPLOYEE;
/
--- EXECUTION
EXEC update_employee(9, 'Ferrer', 'Gaby');

-- 4.2 Stored Procedure Input Parameters
--- CREATION
create or replace PROCEDURE REPORTTO_EMPLOYEE (EID in EMPLOYEE.EMPLOYEEID%TYPE, EMP OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN EMP FOR
    SELECT EE.LASTNAME || ', ' || EE.FIRSTNAME AS SUBORDINATE,
			E.LASTNAME || ', ' || E.FIRSTNAME AS REPORTSTO
	FROM EMPLOYEE E JOIN EMPLOYEE EE ON (E.EMPLOYEEID = EE.REPORTSTO)
	WHERE EE.EMPLOYEEID = EID;
END REPORTTO_EMPLOYEE;
--- EXECUTION
VARIABLE mycursor refcursor;
EXEC REPORTTO_EMPLOYEE(2, :mycursor);
PRINT mycursor;


-- 4.3 Stored Procedure Output Parameters
---CREATION
CREATE OR REPLACE PROCEDURE CUSTOMER_NAME_COMPANY (CID IN CUSTOMER.CUSTOMERID%TYPE, 
		FN OUT VARCHAR, LN OUT VARCHAR, NAME_COMPANY OUT VARCHAR)
IS
BEGIN
	SELECT FIRSTNAME || ' ' || LASTNAME || ' works in ' || COMPANY INTO NAME_COMPANY
	FROM CUSTOMER WHERE CUSTOMERID = CID;

END CUSTOMER_NAME_COMPANY;
/
---CREATION
CREATE OR REPLACE PROCEDURE PRINT_CUSTOMER_NAME_COMPANY (CI IN NUMBER)
IS
	FSN	VARCHAR2(40);
	LSN VARCHAR2(20);
	COMPANN VARCHAR2(80);
    --PNTOUT VARCHAR(100);
BEGIN
	CUSTOMER_NAME_COMPANY(CI, FSN, LSN, COMPANN);
    DBMS_Output.Put_Line(COMPANN);
END PRINT_CUSTOMER_NAME_COMPANY;
/
---EXECUTION
EXECUTE PRINT_CUSTOMER_NAME_COMPANY (60);

-- 5.0 Transactions
--- CREATION
CREATE OR REPLACE PROCEDURE DELETE_INVOICE (IID IN NUMBER)
IS
BEGIN

    DELETE FROM INVOICELINE WHERE INVOICEID = IID;
	DELETE FROM INVOICE WHERE INVOICEID = IID;
	COMMIT;
END DELETE_INVOICE;
/
--- EXECUTION
EXECUTE DELETE_INVOICE(90);

-- 5.0 Transactions
---CREATION, INSERTION OF A NEW CUSTOMER USING A STORED PROCEDURE AND A CUSTOMER%ROWTYPE
CREATE OR REPLACE PROCEDURE NEW_CUSTOMER(CID NUMBER, FNAME VARCHAR2, LNAME VARCHAR2, COMPAN VARCHAR2, ADDR VARCHAR2,
    CTY VARCHAR2, ST VARCHAR2, CTRY VARCHAR2, POSTAL VARCHAR2, PHONE VARCHAR2, FAX VARCHAR2, EMAIL VARCHAR2, SUPPORT NUMBER) IS
C_ROW CUSTOMER%ROWTYPE;
BEGIN
    C_ROW.CUSTOMERID := CID;
    C_ROW.FIRSTNAME := FNAME;
    C_ROW.LASTNAME := LNAME;
    C_ROW.COMPANY := COMPAN;
    C_ROW.ADDRESS := ADDR;
    C_ROW.CITY := CTY;
    C_ROW.STATE := ST;
    C_ROW.COUNTRY := CTRY;
    C_ROW.POSTALCODE := POSTAL;
    C_ROW.PHONE := PHONE;
    C_ROW.FAX := FAX;
    C_ROW.EMAIL := EMAIL;
    C_ROW.SUPPORTREPID := SUPPORT;
    
    INSERT INTO CUSTOMER VALUES C_ROW;
END NEW_CUSTOMER;
/ 
--- EXECUTION
CALL NEW_CUSTOMER(62,'Mary','Linna','Target','9876 Merry St','Tampa','FL','USA', '32172','+1 543-545-4323','+1 432-546-4354','maya@gmail.com', 2);


--- 6.1 AFTER/FOR
--- TRIGGERS EXECUTE A DML TO ANOTHER TABLE OTHER THAN THE TABLE THAT TRIGGERED IT
--- CREATION
CREATE OR REPLACE TRIGGER TRIGGER_AFTER_EMPLOYEE_INSERT
    AFTER INSERT ON EMPLOYEE
    FOR EACH ROW
BEGIN 
	DBMS_OUTPUT.PUT_LINE('ID ' || :NEW.EMPLOYEEID || ' OF EMPLOYEE ' || :NEW.FIRSTNAME || ' ' || :NEW.LASTNAME || 
    ' was successfully inserted into EMPLOYEE table');
END;
/
--- EXECUTION 
--- AFTER THE EMPLOYEE IS INSERTED THE FOLLOWING DISPLAYS: ID 12 OF EMPLOYEE Jay Jan was successfully inserted into EMPLOYEE table

--- CREATION
CREATE OR REPLACE TRIGGER TRIGGER_AFTER_ALBUM_UPDATE
    AFTER UPDATE ON ALBUM
    FOR EACH ROW
BEGIN 
	UPDATE INVOICE SET TOTAL = TOTAL + 0.50; 
END;
/
--- AFTER EACH ROW UPDATE ON ALBUM, THE TOTAL ATTRIBUTE OF EACH INVOICE RECORD INCREASES BY 0.50
UPDATE ALBUM SET TITLE = 'Volume Three' where ALBUMID = 225;

--- CREATION
CREATE OR REPLACE TRIGGER TRIGGER_AFTER_CUSTOMER_DELETE
	AFTER DELETE ON CUSTOMER
	FOR EACH ROW
DECLARE MAXXX NUMBER(3);
BEGIN
	SELECT MAX(MEDIATYPEID)+1 INTO MAXXX FROM MEDIATYPE; --INSERTS A RECORD WITH A PRIMARY KEY BY ADDING ONE TO THE MAXIMUM OF PRIMARY KEYS
	INSERT INTO MEDIATYPE VALUES (MAXXX,'BLANK CD');
END;
/
--- TRIGGER IS INVOKED WHEN A DELETE ON CUSTOMER IS EXECUTED
DELETE FROM CUSTOMER WHERE CUSTOMERID = 61;

-- 7.1 INNER
SELECT FIRSTNAME || ' ' || LASTNAME AS CUSTOMERNAME, INVOICEID FROM CUSTOMER INNER JOIN INVOICE USING (CUSTOMERID);
-- 7.2 OUTER
SELECT
   C.CUSTOMERID,
   C.FIRSTNAME,
   C.LASTNAME,
   I.INVOICEID,
   I.TOTAL 
FROM
   CUSTOMER C 
   FULL OUTER JOIN
      INVOICE I 
      ON (C.CUSTOMERID = I.CUSTOMERID) 
-- 7.3 RIGHT
SELECT AR.NAME, AL.TITLE from ALBUM AL RIGHT OUTER JOIN ARTIST AR on (AL.ARTISTID = AR.ARTISTID);
-- 7.4 CROSS
SELECT * FROM ALBUM, ARTIST ORDER BY artist.name ASC;
-- 7.5 SELF
SELECT EE.LASTNAME || ', ' || EE.FIRSTNAME AS SUBORDINATE,
		E.LASTNAME || ', ' || E.FIRSTNAME AS REPORTSTO
FROM EMPLOYEE E JOIN EMPLOYEE EE ON (E.EMPLOYEEID = EE.REPORTSTO);
